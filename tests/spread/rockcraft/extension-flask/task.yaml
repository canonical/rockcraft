summary: flask extension test
environment:
  BASE/bare_2204: bare
  BASE/bare_2404: bare
  BASE/base_2204: ubuntu@22.04
  BASE/base_2404: ubuntu@24.04

  BUILD_BASE/bare_2204: ubuntu@22.04
  BUILD_BASE/bare_2404: ubuntu@24.04
  BUILD_BASE/base_2204: ubuntu@22.04
  BUILD_BASE/base_2404: ubuntu@24.04

execute: |
  NAME="flask-${SCENARIO//./-}"
  ROCK_FILE="${NAME}_0.1_amd64.rock"
  IMAGE="${NAME}:0.1"

  run_rockcraft init --name flask-extension --profile flask-framework
  sed -i "s/name: .*/name: ${NAME}/g" rockcraft.yaml
  # Replace base with ubuntu@<base>
  sed -i "s/^base: .*/base: ${BASE}/g" rockcraft.yaml
  echo "build-base: ${BUILD_BASE}" >> rockcraft.yaml
  run_rockcraft pack

  test -f "${ROCK_FILE}"
  test ! -d work

  # Ensure docker does not have this container image
  docker rmi --force "${IMAGE}"
  # Install container
  sudo rockcraft.skopeo --insecure-policy copy "oci-archive:${ROCK_FILE}" "docker-daemon:${IMAGE}"
  # Ensure container exists
  docker images "${IMAGE}" | MATCH "${NAME}"

  # ensure container doesn't exist
  docker rm -f "${NAME}-container"

  # test the flask project is ready to run inside the container
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -m gunicorn --chdir /flask/app --check-config app:app
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -c "import pathlib;assert pathlib.Path('/flask/app/static/js/test.js').is_file()"
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -c "import pathlib;assert not pathlib.Path('/flask/app/node_modules').exists()"

  # test the default flask service
  docker run --name "${NAME}-container" -d -p 8137:8000 "${IMAGE}"
  retry -n 5 --wait 2 curl localhost:8137
  [ "$(curl -sSf localhost:8137)" == "ok" ]

restore: |
  NAME="flask-${SCENARIO//./-}"
  docker stop "${NAME}-container" || true
  docker rm --force "${NAME}-container"
  rm -f "*.rock" rockcraft.yaml
  docker system prune -a -f
