summary: expressjs extension test

kill-timeout: 45m
environment:
  SCENARIO/bare: bare
  SCENARIO/base_2404: ubuntu-24.04
  ROCKCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: "true"
  UV_USE_IO_URING: "0"

execute: |
  NAME="expressjs-${SCENARIO//./-}"
  ROCK_FILE="${NAME}_0.1_amd64.rock"
  IMAGE="${NAME}:0.1"

  sudo apt-get update -y && sudo apt-get install npm -y
  npm install -g express-generator@4
  express app
  cd app && npm install && cd ..

  run_rockcraft init --name "${NAME}" --profile expressjs-framework
  sed -i "s/^base: .*/base: ${SCENARIO//-/@}/g" rockcraft.yaml
  if [ "${SCENARIO}" != "bare" ]; then
    sed -i "s/^build-base: .*/build-base: ${SCENARIO//-/@}/g" rockcraft.yaml
  else
    # Install findutils for the bare scenario
    # This is a workaround for the fact that the bare scenario does not have
    # findutils installed by default, which is required for the test
    cat >> rockcraft.yaml <<EOL
  parts:
    find-app:
      plugin: nil
      stage-packages:
        - findutils
  EOL
  fi
   
  function run_test() {
    # rockcraft clean is required here because the cached layer writes to npmrc
    # multiple times, causing the app to crash on first run.
    rockcraft clean
    run_rockcraft pack

    test -f "${ROCK_FILE}"
    test ! -d work

    # Ensure docker does not have this container image
    docker rmi --force "${IMAGE}"
    # Install container
    sudo rockcraft.skopeo --insecure-policy copy "oci-archive:${ROCK_FILE}" \
    "docker-daemon:${IMAGE}"

    # ensure the app and promtail folders have the correct user
    check_directory_ownership() {
      local directory="$1"
      docker run --rm --entrypoint /usr/bin/bash "${IMAGE}" -c "find ${directory}/ ! -user '_daemon_' || { echo 'Error: ${directory} or its contents are not owned by _daemon_'; exit 2; }"
    }

    check_directory_ownership "/app"
    check_directory_ownership "/lib/node_modules/app"
    check_directory_ownership "/opt/promtail"
    check_directory_ownership "/etc/promtail"

    # Ensure image exists
    docker images "${IMAGE}" | MATCH "${NAME}"

    # Ensure container doesn't exist
    docker rm -f "${NAME}-container"

    # test the default expressjs service
    docker run --name "${NAME}-container" -d -p 8137:3000 "${IMAGE}"
    retry -n 5 --wait 2 curl localhost:8137
    http_status=$(curl -s -o /dev/null -w "%{http_code}" localhost:8137)
    [ "${http_status}" -eq 200 ]
  }

  run_test


  if [ "${SCENARIO}" != "bare" ]; then
    echo "parts:" >> rockcraft.yaml
  fi
  # test the expressjs service with a Node version specified
  node_version=20.18.2
  cat <<EOF >> rockcraft.yaml
    expressjs-framework/install-app:
      npm-include-node: true
      npm-node-version: $node_version
  EOF
  run_test

  container_id=$(docker ps -q -f name="${NAME}-container")
  container_node_version=$(sudo docker exec $container_id node --version)
  [ "$container_node_version" = "v$node_version" ]

restore: |
  NAME="expressjs-${SCENARIO//./-}"
  docker stop "${NAME}-container" || true
  docker rm --force "${NAME}-container"
  rm -f "*.rock" rockcraft.yaml
  docker system prune -a -f
