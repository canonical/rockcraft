summary: flask extension async test
priority: 50
environment:
  SCENARIO/bare: bare
  SCENARIO/base_2204: ubuntu-22.04
  SCENARIO/base_2404: ubuntu-24.04
execute: |
  NAME="flask-${SCENARIO//./-}"
  ROCK_FILE="${NAME}_0.1_amd64.rock"
  IMAGE="${NAME}:0.1"

  run_rockcraft init --name flask-extension --profile flask-framework
  sed -i "s/name: .*/name: ${NAME}/g" rockcraft.yaml
  if [ "${SCENARIO}" = "bare" ]; then
      sed -i "s/base: .*/base: ${SCENARIO}\nbuild-base: ubuntu@22.04/g" rockcraft.yaml
  else
      sed -i "s/base: .*/base: ${SCENARIO//-/@}/g" rockcraft.yaml
  fi
  run_rockcraft pack

  test -f "${ROCK_FILE}"
  # test ! -d work

  # Ensure docker does not have this container image
  # docker rmi --force "${IMAGE}"
  # Install image
  sudo rockcraft.skopeo --insecure-policy copy "oci-archive:${ROCK_FILE}" "docker-daemon:${IMAGE}"
  # Ensure image exists
  docker images "${IMAGE}" | MATCH "${NAME}"

  # ensure container doesn't exist
  # docker rm -f "${NAME}-container"

  # test that gunicorn is installed and config file is correct
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -m gunicorn --chdir /flask/app --check-config app:app

  # test that gevent is installed
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -c "import gevent;print(f'gevent: {gevent.__version__}')"

  # test that pebble service uses gevent
  docker run --rm "${IMAGE}" plan | grep gevent

  # test the default flask service
  docker run --name "${NAME}-container" -d -p 8138:8000 "${IMAGE}"
  retry -n 5 --wait 2 curl localhost:8138
  [ "$(curl -sSf localhost:8138)" == "ok" ]

  # test the async flask service
  NUM_REQUESTS=15
  URL='localhost:8138/io'
  ASYNC_RESULT='TRUE'

  echo "Firing $NUM_REQUESTS requests to $URL..."

  overall_start_time=$(date +%s)

  for i in $(seq 1 $NUM_REQUESTS); do
    (
      start_time=$(date +%s)
      echo "Request $i start time: $start_time"

      curl -s "$URL"

      end_time=$(date +%s)
      pass_time=$((end_time - start_time))
      echo "Request $i end time: $end_time == $pass_time"
      echo "Request $i end time: $end_time == $pass_time"
    ) &
  done

  wait
  end_time=$(date +%s)
  overall_passtime=$((end_time - overall_start_time))
  echo "Total pass time: $overall_passtime"
  if [ $((3 < overall_passtime)) -eq 1 ]; then
    echo "Error!"
    ASYNC_RESULT='FALSE'
    exit 2
  fi
  [ "$ASYNC_RESULT" == 'TRUE' ]

  # remove the async flask container
  docker rm "${NAME}-container" -f

  # test the sync flask service
  docker run --name "${NAME}-container" -d -p 8138:8000 "${IMAGE}" --args flask sync
  retry -n 5 --wait 2 curl localhost:8138
  [ "$(curl -sSf localhost:8138)" == "ok" ]

  NUM_REQUESTS=5
  URL='localhost:8138/io'
  SYNC_RESULT='TRUE'

  echo "Firing $NUM_REQUESTS requests to $URL..."

  overall_start_time=$(date +%s)

  for i in $(seq 1 $NUM_REQUESTS); do
    (
      start_time=$(date +%s)
      echo "Request $i start time: $start_time"

      curl -s "$URL"

      end_time=$(date +%s)
      pass_time=$((end_time - start_time))
      echo "Request $i end time: $end_time == $pass_time"
      echo "Request $i end time: $end_time == $pass_time"
    ) &
  done

  wait
  end_time=$(date +%s)
  overall_passtime=$((end_time - overall_start_time))
  echo "Total pass time: $overall_passtime"
  if [ $((9 > overall_passtime)) -eq 1 ]; then
    echo "Error!"
    SYNC_RESULT='FALSE'
    exit 2
  fi
  [ "$SYNC_RESULT" == 'TRUE' ]
restore: |
  NAME="flask-${SCENARIO//./-}"
  docker stop "${NAME}-container"
  docker rm "${NAME}-container"
  rm -f "*.rock" rockcraft.yaml
  docker system prune -a -f
