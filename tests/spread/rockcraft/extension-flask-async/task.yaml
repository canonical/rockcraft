summary: flask extension async test
environment:
  FLAVOUR: ubuntu-22.04
execute: |
  NAME="flask-${FLAVOUR//./-}"
  ROCK_FILE="${NAME}_0.1_amd64.rock"
  IMAGE="${NAME}:0.1"

  run_rockcraft init --name flask-extension --profile flask-framework
  sed -i "s/name: .*/name: ${NAME}/g" rockcraft.yaml
  sed -i "s/base: .*/base: ${FLAVOUR//-/@}/g" rockcraft.yaml

  # uncomment the parts main section
  sed -i "s/# parts:/parts:/g" rockcraft.yaml
  # uncomment the part depending on the base
  awk -i inplace -v block_key="flask-framework/async-dependencies" '
  BEGIN {
    in_block = 0;
    comment_pattern = "^#[[:space:]]";
    uncommented_line = "";
  }

  /^#[[:space:]]/ {
    # Check if the line contains the block key
    if (in_block == 0 && $0 ~ block_key) {
      in_block = 1;
    }
  }

  {
    # If in_block is active, uncomment lines
    if (in_block == 1) {
      uncommented_line = gensub(comment_pattern, "", 1, $0);
      if (uncommented_line == $0) {
        in_block = 0;
      }
      print uncommented_line;
    } else {
      print $0;
    }
  }' rockcraft.yaml
  run_rockcraft pack

  test -f "${ROCK_FILE}"
  test ! -d work

  # Ensure docker does not have this container image
  docker rmi --force "${IMAGE}"
  # Install container
  sudo rockcraft.skopeo --insecure-policy copy "oci-archive:${ROCK_FILE}" "docker-daemon:${IMAGE}"
  # Ensure container exists
  docker images "${IMAGE}" | MATCH "${NAME}"

  # ensure container doesn't exist
  docker rm -f "${NAME}-container"

  # test that gunicorn is installed and config file is correct
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -m gunicorn --chdir /flask/app --check-config app:app

  # test that gevent is installed
  docker run --rm --entrypoint /bin/python3 "${IMAGE}" -c "import gevent;print(f'gevent: {gevent.__version__}')"

  # test the uncommented extra parts effectively added async functionality
  docker run --rm --entrypoint /bin/grep "${IMAGE}" 'worker_class = "gevent"' /flask/gunicorn.conf.py

  # test the default flask service
  docker run --name "${NAME}-container" -d -p 8138:8000 "${IMAGE}"
  retry -n 5 --wait 2 curl localhost:8138
  [ "$(curl -sSf localhost:8138)" == "ok" ]

  # test the async flask service
  NUM_REQUESTS=15
  URL='localhost:8138/io'
  ASYNC_RESULT='TRUE'

  echo "Firing $NUM_REQUESTS requests to $URL..."

  overall_start_time=$(date +%s)

  for i in $(seq 1 $NUM_REQUESTS); do
    (
      start_time=$(date +%s)
      echo "Request $i start time: $start_time"

      curl -s "$URL"

      end_time=$(date +%s)
      pass_time=$(($end_time - $start_time))
      echo "Request $i end time: $end_time == $pass_time"
      echo "Request $i end time: $end_time == $pass_time"
    ) &
  done

  wait
  end_time=$(date +%s)
  overall_passtime=$(($end_time - $overall_start_time))
  echo "Total pass time: $overall_passtime"
  if ((3 < $overall_passtime)); then
    echo "Error!"
    ASYNC_RESULT='FALSE'
    exit 2
  fi
  [ "$ASYNC_RESULT" == 'TRUE' ]
restore: |
  NAME="flask-${FLAVOUR//./-}"
  docker stop "${NAME}-container"
  docker rm "${NAME}-container"
  rm -f "*.rock" rockcraft.yaml
  docker system prune -a -f
