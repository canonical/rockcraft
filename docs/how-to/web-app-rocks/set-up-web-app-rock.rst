.. _set-up-web-app-rock:

Set up a 12-Factor app rock
***************************

The following how-to guide provides instructions on
initializing and configuring rocks for 12-factor apps.

Initialize a 12-factor app rock
-------------------------------

Use ``rockcraft init`` and specify the relevant profile:

.. code-block:: bash

    rockcraft init --profile <profile>

Rockcraft automatically creates a ``rockcraft.yaml`` project file
for the rock in your current directory. You will need to check the project
file to verify that the rock's name and description are correct.

.. tabs::

    .. group-tab:: Django

        .. code-block:: bash

            rockcraft init --profile django-framework

    .. group-tab:: Express

        .. code-block:: bash

            rockcraft init --profile expressjs-framework

    .. group-tab:: FastAPI

        .. code-block:: bash

            rockcraft init --profile fastapi-framework

    .. group-tab:: Flask

        .. code-block:: bash

            rockcraft init --profile flask-framework

    .. group-tab:: Go

        .. code-block:: bash

            rockcraft init --profile go-framework


For more information, see: :ref:`ref_commands_init`

Include extra files in the OCI image
------------------------------------

The following files are included in the image by default from
the root of the project:

- ``app`` (does not apply to the ``go-framework``)
- ``app.py`` (does not apply to the ``go-framework``)
- ``migrate``
- ``migrate.sh``
- ``migrate.py`` (does not apply to the ``go-framework``)
- ``static``
- ``templates``

To change this list, add the following snippet to the project file:

.. tabs::

   .. group-tab:: Flask

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             flask-framework/install-app:
               prime:
                 - flask/app/.env
                 - flask/app/app.py
                 - flask/app/webapp
                 - flask/app/templates
                 - flask/app/static

      Note the ``flask/app/`` prefix that is required followed by the relative path to
      the project root.

   .. group-tab:: Django

      N/A

   .. group-tab:: FastAPI

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             fastapi-framework/install-app:
               prime:
                 - app/.env
                 - app/app.py
                 - app/webapp
                 - app/templates
                 - app/static

      Note the ``app/`` prefix that is required followed by the relative path to
      the project root.

   .. group-tab:: Go

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             go-framework/assets:
               prime:
                 - app/templates
                 - app/static
                 - app/migrate.sh

      Note the ``app/`` prefix that is required followed by the relative path to
      the project root.

Include additional debs in the OCI image
----------------------------------------

If your app requires debs -- for example, to connect to a database -- add the
following snippet to the project file:

.. tabs::

   .. group-tab:: Flask

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             flask-framework/dependencies:
               stage-packages:
                 # list required packages or slices for your flask application below.
                 - libpq-dev

   .. group-tab:: Django

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             django-framework/dependencies:
               stage-packages:
                 # list required packages or slices for your Django application below.
                 - libpq-dev

   .. group-tab:: FastAPI

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             fastapi-framework/dependencies:
               stage-packages:
                 # list required packages or slices for your FastAPI application below.
                 - libpq-dev

   .. group-tab:: Go

      .. code-block:: yaml
         :caption: rockcraft.yaml

           parts:
             runtime-debs:
               plugin: nil
               stage-packages:
                 - postgresql-client

      For the ``go-framework`` extension, a deb could be needed for example to use an external command in the migration process.


Override commands
-----------------

The ``services`` key follows the :external+pebble:ref:`Pebble layer specification
<layer-specification>` and defines the entrypoint to your app.
You can override the default service commands in ``rockcraft.yaml``.

To override a service's command, check the default service
entrypoint generated by the extension by running ``rockcraft expand-extensions``.
Then, adapt the command to your needs and declare it in your project file. For
example:

.. tabs::

   .. group-tab:: Flask

      .. code-block:: yaml
         :caption: Output of ``rockcraft expand-extensions``

         # ...

         services:
           flask:
             override: replace
             command: /bin/python3 -m gunicorn -c /flask/gunicorn.conf.py app:app -k [ sync ]
             startup: enabled
             after:
               - statsd-exporter
             user: _daemon_

      To limit the maximum number of pending connections in Gunicorn to 1024, add the
      following lines to your project file.

      .. code-block:: yaml
         :caption: rockcraft.yaml

         services:
           flask:
             command: /bin/python3 -m gunicorn -c /flask/gunicorn.conf.py app:app --backlog 1024 -k [ sync ]

   .. group-tab:: Django

      .. code-block:: yaml
         :caption: Output of ``rockcraft expand-extensions``

         # ...
         services:
           django:
             override: replace
             command: /bin/python3 -m gunicorn -c /django/gunicorn.conf.py django_hello_world.wsgi:application -k [ sync ]
             startup: enabled
             after:
               - statsd-exporter
             user: _daemon_
         # ...

      To limit the maximum number of pending connections in ``Gunicorn`` to 1024, add the following
      lines to ``rockcraft.yaml``.

      .. code-block:: yaml
         :caption: rockcraft.yaml

         services:
           django:
             command: /bin/python3 -m gunicorn -c /django/gunicorn.conf.py django_hello_world.wsgi:application --backlog 1024 -k [ sync ]

   .. group-tab:: FastAPI

      .. code-block:: yaml
         :caption: Output of ``rockcraft expand-extensions``

         # ...
         services:
           fastapi:
             override: replace
             command: /bin/python3 -m uvicorn app:app
             startup: enabled
             environment:
               UVICORN_HOST: 0.0.0.0
             user: _daemon_
             working-dir: /app

      To limit the maximum number of pending connections in ``uvicorn`` to 1024, add the following
      lines to ``rockcraft.yaml``.

      .. code-block:: yaml
         :caption: rockcraft.yaml

         services:
           fastapi:
             command: /bin/python3 -m uvicorn app:app --backlog 1024

   .. group-tab:: Go

      .. code-block:: yaml
         :caption: Output of ``rockcraft expand-extensions``

         # ...
         services:
           go:
             override: replace
             command: go-hello-world
             startup: enabled
             user: _daemon_
             working-dir: /app

      To pass the argument ``--example-arg`` to the main Go app, add the following lines
      to ``rockcraft.yaml``.

      .. code-block:: yaml
         :caption: rockcraft.yaml

         services:
           go:
             override: replace
             command: go-hello-world --example-arg

   .. group-tab:: Express

      .. code-block:: yaml
         :caption: Output of ``rockcraft expand-extensions``

         # ...
         services:
           expressjs:
             override: replace
             command: npm start
             startup: enabled
             environment:
               NODE_ENV: production
             user: _daemon_
             working-dir: /app


      To pass the argument ``--example-arg`` to the ExpressJS script, add the following lines
      to ``rockcraft.yaml``.

      .. code-block:: yaml
         :caption: rockcraft.yaml

         services:
           expressjs:
             command: npm start -- --example-arg

   .. group-tab:: Spring Boot

      .. code-block:: yaml
         :caption: Output of ``rockcraft expand-extensions``

         # ...
         services:
           spring-boot:
             override: replace
             command: bash -c "java -jar *.jar"
             startup: enabled
             user: _daemon_
             working-dir: /app

      To enable a debug mode with a flag, add the following lines to ``rockcraft.yaml``.

      .. code-block:: yaml
         :caption: rockcraft.yaml

         services:
           spring-boot:
             command: bash -c "java -jar *.jar --debug"
